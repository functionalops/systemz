{"name":"Systemz","tagline":"A scalaz style project providing a way to functionally wrap system level JVM requirements like writing Java Agents, extending or inspecting JMX, interfacing with class loaders, etc.","body":"# systemz\r\n\r\n## Purpose\r\n\r\nA scalaz style project providing a way to functionally wrap system level JVM\r\nrequirements like writing Java Agents, extending or inspecting JMX,\r\ninterfacing with class loaders, etc.\r\n\r\n## Status\r\n\r\nWe just started the project. Please wait while we move in here. Cheers!\r\n\r\n## License\r\n\r\nThis will be licensed under the BSD 3-clause license. See link:LICENSE[].\r\n\r\n## Prerequisites\r\n\r\n1. Java 8\r\n2. Scala 2.11.4\r\n3. SBT 0.13.0+\r\n\r\n## Getting Started\r\n\r\nInside the root directory of the repository:\r\n\r\n1. Launch SBT:\r\n\r\n        $ sbt\r\n\r\n2. Compile everything and run all tests:\r\n\r\n        > test\r\n\r\n## Code Structure\r\n\r\nI use a less common structure to my code than many Scala projects so here is\r\nthe code structure outline and explanation:\r\n\r\n* **Types:** I use a _more_ functional style of coding in Scala and as a\r\n  result start coding from _*closed*_ algebraic data types (usually sum,\r\n  product, and recursive types), which define the basic elements of the\r\n  domain. These traits (types) and corresponding case classes/objects (value\r\n  constructors) can be found in the `Types` trait for namespacing. See below\r\n  for description of namespace organization.\r\n* **\"Classes\":**  this does not refer to OO classes but rather typeclass\r\n  definitions. I have a trait named `Classes` which contains typeclass\r\n  definitions used to extend our basic sum, product, and recursive data\r\n  types.\r\n* **\"Instances\":** again this does not refer to \"instances\" of OO classes,\r\n  rather this refers to implementations of typeclasses for specific types.\r\n  In the trait named `Instances` you will find a number of implicits that\r\n  can be mixed in to different contexts later the allows Scala to find\r\n  the correct instance definition for a specific type of a typeclass based\r\n  on the scope it is introduced. More specific scopes have higher precedence\r\n  which means the default `systemz` package instance definitions can be\r\n  overridden in applicaation/client code at a higher level if necessary.\r\n* **Functions:** I have a trait named `Functions`, which along side the\r\n  interface to our core types and typeclasses provides the public API for\r\n  the `systemz` library/toolkit.\r\n* **Namespacing:** You will note I am using traits for namespacing primitives\r\n  that I then use to mixin to objects used for external package namespacing.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}